#! /bin/bash

#-------------------------------------------------------------------------------------------------#
#                         Brazilian global Atmospheric Model - BAM_V1.2.1                         #
#-------------------------------------------------------------------------------------------------#
# Descrição:                                                                                      #
#     Script para executar o pós-processamento do BAM                                             #
#                                                                                                 #
# Uso:                                                                                            #
#     ./runPos <opções>                                                                           #
#                                                                                                 #
# Exemplo:                                                                                        #
#     ./runPos -t 126 -l 28 -I 2012123118 -F 2013010118 -p CPT                                    #
#                                                                                                 #
# Opções:                                                                                         #
#     * -t  <val>: truncamento [default: 62]                                                      #
#     * -l  <val>: numero de niveis [default: 28]                                                 #
#     * -p  <val>: prefixo dos arquivos do BAM (condição inicial e previsões) [default: CPT]      #
#     * -np <val>: número de processadores [default: 72]                                          #
#     * -N  <val>: número de nós [default: 24]                                                    #
#     * -d  <val>: número de tarefas por processos MPI [default: 1]                               #
#     * -I  <val>: data da condição inicial (cold start)                                          #
#     * -F  <val>: data da previsão final                                                         #
#     * -ri......: interpola o campo de saída para um grade regular [default: .FALSE.]            #
#     * -r  <val>: define a resolução do campo de saida em graus                                  #
#     * -ft <val>: define a tabela utilizada para definir quais campos devem                      #
#                  ser posprocessados [default: 'p']                                              #
#     * -ps <val>: define o servidor PBS utilizado [default: eslogin]                             #
#     * -b.......: arquivo de saida binário [default: .FALSE.]                                    #
#                                                                                                 #
# Notas:                                                                                          #
#     * As tabelas disponíveis para definir quais campos devem sair (opção '-ft') são (estas      #
#       tabelas podem ser encontradas em pos/datain):                                             #
#       * 'p': utiliza a tabela rfd.pnt                                                           #  
#       * 's': utiliza a tabela rfd.sfc                                                           #    
#       * 'c': utiliza a tabela rfd.clm                                                           #   
#       * 'e': utiliza a tabela rfd.eta                                                           #    
#       * 'g': utiliza a tabela rfd.ens                                                           #     
#       * ' ': utiliza a tabela rfd                                                               #  
#                                                                                                 #
#     * O pós processamento pode ser executado em paralelo ou serial, isso é definido por         #
#       meio a opção '-ps' que define o servidor PBS utilizado, esta opção possui dois            #
#       valores possíveis:                                                                        #
#       * eslogin: roda em paralelo nos nós principais do Tupã                                    #
#       * aux....: roda sequencial nos nós auxiliares do Tupã                                     #
#                                                                                                 #
# Revisões:                                                                                       #
#     * 11-12-2016: de Mattos, J. G. Z - código inicial                                           #
#     * 17-02-2020: Bastarz, C. F.     - revisão geral para a consolidação da versão e algumas    #
#                                        melhorias                                                #
#                                                                                                 #
# DMD/CPTEC/INPE, 2019                                                                            #
#-------------------------------------------------------------------------------------------------#

#
# Funções comuns
#
usageprincipal()
{
  echo ""
  echo -e "\033[34;1m Brazilian global Atmospheric Model - BAM_V1.2.1\033[m"
  echo ""
  echo " Descrição:"
  echo "     Script para executar o pós-processamento do BAM"
  echo ""
  echo " Uso:"
  echo "     ./runPos <opções>"
  echo ""
  echo " Exemplo:"
  echo "     ./runPos -t 126 -l 28 -I 2012123118 -F 2013010118 -p CPT"
  echo ""
  echo " Opções:"
  echo "     * -t  <val>: truncamento [default: 62]"
  echo "     * -l  <val>: numero de niveis [default: 28]"
  echo "     * -p  <val>: prefixo dos arquivos do BAM (condição inicial e previsões) [default: CPT]"
  echo "     * -np <val>: número de processadores [default: 72]"
  echo "     * -N  <val>: número de nós [default: 24]"
  echo "     * -d  <val>: número de tarefas por processos MPI [default: 1]"
  echo "     * -I  <val>: data da condição inicial (cold start)"
  echo "     * -F  <val>: data da previsão final"
  echo "     * -ri......: interpola o campo de saída para um grade regular [default: .FALSE.]"
  echo "     * -r  <val>: define a resolução do campo de saida em graus"
  echo "     * -ft <val>: define a tabela utilizada para definir quais campos devem"
  echo "                  ser posprocessados [default: 'p']"
  echo "     * -ps <val>: define o servidor PBS utilizado [default: eslogin]"
  echo "     * -b.......: arquivo de saida binário [default: .FALSE.]"
  echo ""
  echo -e "\033[33;1m DMD/CPTEC/INPE, 2019 \033[m"
  echo ""    
}

subwrd()
{
  str=$(echo "${@}" | awk '{ for (i=1; i<=NF-1; i++) printf("%s ",$i)}')
  n=$(echo "${@}" | awk '{ print $NF }')
  echo "${str}" | awk -v var=${n} '{print $var}'
}

#
# Pegando as opções que foram passadas pela linha de comando
#
if [ $# -eq 0 ]
then
  usageprincipal
  exit 0
else
  i=1
  flag=0
  while [ 1 ]
  do
    arg=$(echo "${@}" | awk -v var=${i} '{print $var}')
    i=$((i+1))
  
    if [ -z ${arg} ]; then break; fi
  
    while [ 1 ]
    do
      if [ ${arg} = '-t' ]   ; then TRC=$(subwrd ${@} ${i})              ; i=$((i+1)); break ; fi
      if [ ${arg} = '-l' ]   ; then LV=$(subwrd ${@} ${i})               ; i=$((i+1)); break ; fi
      if [ ${arg} = '-p' ]   ; then PREFIX=$(subwrd ${@} ${i})           ; i=$((i+1)); break ; fi
      if [ ${arg} = '-I' ]   ; then LABELI=$(subwrd ${@} ${i})           ; i=$((i+1)); break ; fi
      if [ ${arg} = '-F' ]   ; then LABELF=$(subwrd ${@} ${i})           ; i=$((i+1)); break ; fi
      if [ ${arg} = '-i' ]   ; then INITLZ=$(subwrd ${@} ${i})           ; i=$((i+1)); break ; fi
      if [ ${arg} = '-np' ]  ; then MPITasks=$(subwrd ${@} ${i})         ; i=$((i+1)); break ; fi
      if [ ${arg} = '-N' ]   ; then TasksPerNode=$(subwrd ${@} ${i})     ; i=$((i+1)); break ; fi
      if [ ${arg} = '-d' ]   ; then ThreadsPerMPITask=$(subwrd ${@} ${i}); i=$((i+1)); break ; fi
      if [ ${arg} = '-r' ]   ; then resolution=$(subwrd ${@} ${i})       ; i=$((i+1)); break ; fi
      if [ ${arg} = '-ft' ]  ; then ReqTable=$(subwrd ${@} ${i})         ; i=$((i+1)); break ; fi
      if [ ${arg} = '-ps' ]  ; then PBSServer=$(subwrd ${@} ${i})        ; i=$((i+1)); break ; fi
      if [ ${arg} = '-ri' ]  ; then RegInterp='.TRUE.'                   ; i=$((i+0)); break ; fi
      if [ ${arg} = '-b' ]   ; then BinaryFile='.TRUE.'                  ; i=$((i+0)); break ; fi
      if [ ${arg} = '-hold' ]; then hold='-h'                            ; i=$((i+1)); break ; fi
  
      if [ ${arg} = '-h' ]   ; then usageprincipal                       ; i=$((i+0)); exit 0; fi
  
      flag=1
      i=$((i-1))
  
      break
    done
    if [ ${flag} -eq 1 ]; then break; fi
  done
fi

#
# Ajuste das variáveis de ambiente
#
LOCALDIR=$(dirname $(readlink -e ${0})) # Local (path) onde está este script

CASE=$(echo ${TRC} ${LV} | awk '{ printf("TQ%4.4dL%3.3d\n",$1,$2)  }')
PATHA=$(pwd)

export FILEENV=$(find -L ${PATHA} -name EnvironmentalVariablesMCGA -print)
export PATHENV=$(dirname ${FILEENV})
export PATHBASE=$(cd ${PATHENV}; cd ../; pwd)

. ${FILEENV} ${CASE} ${PREFIX}

# Truncamento
if [ -z ${TRC} ]
then
  TRC=62
fi

# Número de níveis verticais
if [ -z ${LV} ]
then
  LV=28
fi

# Prefixo dos arquivos
if [ -z ${PREFIX} ]
then
  PREFIX=CPT
fi

# Tipo de inicialização
if [ -z ${INITLZ} ]
then
  INITLZ=2
fi

# Data da condição inicial
if [ -z ${LABELI} ]
then
  echo -e "\033[31;1m LABELI not set \033[m"
  exit 1
fi

# Data final das previsões
if [ -z ${LABELF} ]
then
  echo -e "\033[31;1m LABELF not set \033[m"
  exit 1
fi

# Arquivo de saida binário
if [ -z ${BinaryFile} ]
then
  BinaryFile='.FALSE.'
fi

# Interpola Arquivo de saída para grade regular
if [ -z ${RegInterp} ]
then
  RegInterp='.FALSE.'
fi

# Tabela usada para escolher quais campos serão pós-processados
if [ -z ${ReqTable} ]
then
  ReqTable='p'
fi

# Número de processadores que serão utilizados no job
if [ -z ${MPITasks} ]
then
  MPITasks=72
fi

# Número de processadores utilizados por tarefas MPI
if [ -z ${TasksPerNode} ]
then
  TasksPerNode=24
fi

# Número de processadores utilizados por tarefas OpenMP
if [ -z ${ThreadsPerMPITask} ]
then
  ThreadsPerMPITask=1
fi

val=$(echo ${RegInterp} | tr '[:upper:]' '[:lower:]')
if [ ${val} = '.true.' ]
then
  if [ ${resolution} -lt 0 ]
  then
    resolution=-${resolution}
  fi
fi

# Host em que o processo será executado
if [ -z ${PBSServer} ]
then
  PBSServer='eslogin'
fi

#
# Formata a resolução espectral como TQXXXXLYYY
#
MRES=$(printf "TQ%04dL%03d" ${TRC} ${LV})
TRUN=$(printf "TQ%04d" ${TRC})
NLEV=$(printf "L%03d" ${LV})

#
# Variáveis da máquina
#
walltime=00:30:00
queue=pesq
queue_name="POS${TRC}"

# Nomes dos arquivos utilizados pelo pós-processamento
POSEXE=PostGrib
POSSCP=qsub_pos.qsb
POSNML=POSTIN-GRIB
POSLOG=Print.post.${LABELI}.${LABELF}.${tmstp}.MPI${MPITasks}.out

# Diretórios das simulações
POSRUN=${PATHBASE}/pos/exec_${PREFIX}${LABELI}
DATAIN=${PATHBASE}/model/dataout/${MRES}/${LABELI}
DATAOUT=${DK}/pos/dataout/${MRES}/${LABELI}
DATALIB=${PATHBASE}/pos/datain

#
# Cria os diretórios para a execução do pós-processamento
#
if [ -e ${POSRUN} ]
then
  rm -fr ${POSRUN}
else
  mkdir -p ${POSRUN}
fi

if [ ! -e ${POSRUN}/setout ]
then
  mkdir -p ${POSRUN}/setout
fi

#
# Cria os diretórios onde serão escritos os arquivos pós-processados
#
if [ ! -e ${DATAOUT} ]
then
  mkdir -p ${DATAOUT}
fi

#
# Copia o executável do pós-processamento 
#
if [ ! -e ${POSRUN}/${POSEXE} ]
then
  cp -pfr ${PATHBASE}/pos/exec/${POSEXE} ${POSRUN} 
fi

#
# Altera o namelist POSTIN-GRIB com as configurações do pós-processamento
#
sed -e "s;#TRUNC#;${TRUN};g"        \
    -e "s;#LEV#;${NLEV};g"          \
    -e "s;#LABELI#;${LABELI};g"     \
    -e "s;#LABELF#;${LABELF};g"     \
    -e "s;#PREFIX#;${PREFIX};g"     \
    -e "s;#DATAIN#;${DATAIN};g"     \
    -e "s;#DATAOUT#;${DATAOUT};g"   \
    -e "s;#DATALIB#;${DATALIB};g"   \
    -e "s;#Binary#;${BinaryFile};g" \
    -e "s;#REQTB#;${ReqTable};g"    \
    -e "s;#REGINT#;${RegInterp};g"  \
    -e "s;#RES#;${Resolution};g"    \
    ${LOCALDIR}/${POSNML}.template > ${POSRUN}/${POSNML}

#
# Cria o script de submissão do pós-processamento
#
cat << EOF >${POSRUN}/${POSSCP}
#!/bin/bash
#PBS -o ${HSTMAQ}:${POSRUN}/setout/Out.pos.${PREFIX}.${LABELI}.${tmstp}.MPI${MPITasks}.out
#PBS -j oe
#PBS -l walltime=${walltime}
#PBS -l mppwidth=${MPITasks}
#PBS -l mppnppn=${TasksPerNode}
#PBS -l mppdepth=${ThreadsPerMPITask}
#PBS -V
#PBS -S /bin/bash
#PBS -N ${queue_name}
#PBS -q ${queue}
#PBS -A ${QUOTA}

cd ${POSRUN}

ulimit -s unlimited
ulimit -c unlimited

export PBS_SERVER=${PBSServar}
export KMP_STACKSIZE=128m

mq=$(uname -s | tr '[:upper:]' '[:lower:]')
if [ \${mq} = "linux" ]
then
  export F_UFMTENDIAN=10,11
fi

server=$(echo ${PBSServer} | tr '[:upper:]' '[:lower:]')
if [ \${server} = "aux" ]
then
  /usr/bin/time -v ./$(basename ${POSEXE}) < ${POSNML} > setout/${POSLOG} 2>&1
else
  /usr/bin/time -v aprun -m500h -n ${MPITasks} -N ${TasksPerNode} -d ${ThreadsPerMPITask} \
  ./$(basename ${POSEXE}) < ${POSNML} > setout/${POSLOG} 2>&1
fi

echo "" > ${POSRUN}/monitor.pos
EOF

cd ${POSRUN}

qsub ${hold} ${POSSCP}

until [ -e ${POSRUN}/monitor.pos ]; do sleep 1s; done
rm -fr ${POSRUN}/monitor.pos

for arqctl in $(find ${DATAOUT} -name "*.ctl")
do
  /opt/grads/2.0.a9/bin/gribmap -i ${arqctl} >&- 2>&-  &
done

exit 0
